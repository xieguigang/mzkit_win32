<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ImageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ImageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAB4
        CgAAAk1TRnQBSQFMAwEBAAEQAQABEAEAARgBAAEYAQAE/wEZAQAI/wFCAU0BNgcAATYDAAEoAwABYAMA
        ARgDAAEBAQABGAYAARsbAAP+AREBQwGPAREBQwGPAREBQwGPAREBQwGPAREBQwGPAREBQwGPAREBQwGP
        AREBQwGPAREBQwGPAREBQwGPAREBQwGPAREBQwGPAREBQwGPAREBQwGPAREBQwGPAREBQwGPAREBQwGP
        6gAD/QERAUMBjwERAUMBjwERAUMBjwERAUMBjwERAUMBjwERAUMBjwERAUMBjwERAUMBjwERAUMBjwER
        AUMBjwERAUMBjwERAUMBjwERAUMBjwERAUMBjwERAUMBjwERAUMBjwERAUMBj+oAA/0B6QHoAecB6QHo
        AecB6QHoAecB6QHoAecB6QHoAecB6QHoAecB6QHoAecB6QHoAecB6QHoAecB6QHoAecB6QHoAecB6QHo
        AecB6QHoAecB6QHoAecB6QHoAecB6QHoAecB6QHoAefqAAP9AekB6AHnAekB6AHnAekB6AHnAekB6AHn
        AekB6AHnAekB6AHnAekB6AHnAekB6AHnAekB6AHnAekB6AHnAekB6AHnAekB6AHnAekB6AHnAekB6AHn
        AekB6AHnAekB6AHnAekB6AHn6gAD/QHmAcYBWwHlAcUBWQHkAcMBVgHjAcIBVAHiAcEBUgHgAb8BTwHf
        Ab4BTQHfAb0BSwHeAbwBSAHdAboBRgHcAbkBRAHbAbgBQgHaAbcBQAHZAbYBPwHZAbUBPQHYAbQBPAHY
        AbQBOuoAA/0B5wHIAV4B5gHGAVsB5QHFAVkB5AHDAVYB4wHCAVQB4gHBAVIB4AG/AU8B3wG+AU0B3wG9
        AUsB3gG8AUgB3QG6AUYB3AG5AUQB2wG4AUIB2gG3AUAB2QG2AT8B2QG1AT0B2AG0ATzqAAP9AegByQFg
        AecByAFeAeYBxgFbAeUBxQFZAeQBwwFWAeMBwgFUAeIBwQFSAeABvwFPAd8BvgFNAd8BvQFLAd4BvAFI
        Ad0BugFGAdwBuQFEAdsBuAFCAdoBtwFAAdkBtgE/AdkBtQE96gAD/QHpAcoBYwHoAckBYAHnAcgBXgGT
        AXABBQGTAXABBQGTAXABBQGTAXABBQGTAXABBQGTAXABBQGTAXABBQGTAXABBQGTAXABBQGTAXABBQGT
        AXABBQHbAbgBQgHaAbcBQAHZAbYBP+oAA/0B6gHMAWUB6QHKAWMB6AHJAWAB5wHIAV4B5gHGAVsB5QHF
        AVkB5AHDAVYB4wHCAVQB4gHBAVIB4AG/AU8B3wG+AU0B3wG9AUsB3gG8AUgB3QG6AUYB3AG5AUQB2wG4
        AUIB2gG3AUDqAAP9AesBzQFoAeoBzAFlAekBygFjAegByQFgAecByAFeAeYBxgFbAeUBxQFZAeQBwwFW
        AeMBwgFUAeIBwQFSAeABvwFPAd8BvgFNAd8BvQFLAd4BvAFIAd0BugFGAdwBuQFEAdsBuAFC6gAD/QHs
        Ac4BagHrAc0BaAHqAcwBZQHpAcoBYwHoAckBYAHnAcgBXgHmAcYBWwHlAcUBWQHkAcMBVgHjAcIBVAHi
        AcEBUgHgAb8BTwHfAb4BTQHfAb0BSwHeAbwBSAHdAboBRgHcAbkBROoAA/0B7QHQAWwB7AHOAWoB6wHN
        AWgBkwFwAQUBkwFwAQUBkwFwAQUBkwFwAQUBkwFwAQUBkwFwAQUBkwFwAQUBkwFwAQUBkwFwAQUBkwFw
        AQUBkwFwAQUB3wG9AUsB3gG8AUgB3QG6AUbqAAP9Ae4B0QFvAe0B0AFsAewBzgFqAesBzQFoAeoBzAFl
        AekBygFjAegByQFgAecByAFeAeYBxgFbAeUBxQFZAeQBwwFWAeMBwgFUAeIBwQFSAeABvwFPAd8BvgFN
        Ad8BvQFLAd4BvAFI6gAD/QHvAdIBcQHuAdEBbwHtAdABbAHsAc4BagHrAc0BaAHqAcwBZQHpAcoBYwHo
        AckBYAHnAcgBXgHmAcYBWwHlAcUBWQHkAcMBVgHjAcIBVAHiAcEBUgHgAb8BTwHfAb4BTQHfAb0BS+oA
        A/0B8AHTAXMB7wHSAXEB7gHRAW8B7QHQAWwB7AHOAWoB6wHNAWgB6gHMAWUB6QHKAWMB6AHJAWAB5wHI
        AV4B5gHGAVsB5QHFAVkB5AHDAVYB4wHCAVQB4gHBAVIB4AG/AU8B3wG+AU3qAAP9AfEB1AF1AfAB0wFz
        Ae8B0gFxAZMBcAEFAZMBcAEFAZMBcAEFAZMBcAEFAZMBcAEFAZMBcAEFAZMBcAEFAZMBcAEFAZMBcAEF
        AZMBcAEFAZMBcAEFAeMBwgFUAeIBwQFSAeABvwFP6gAD/QHxAdUBdwHxAdQBdQHwAdMBcwHvAdIBcQHu
        AdEBbwHtAdABbAHsAc4BagHrAc0BaAHqAcwBZQHpAcoBYwHoAckBYAHnAcgBXgHmAcYBWwHlAcUBWQHk
        AcMBVgHjAcIBVAHiAcEBUuoAA/8B8gHWAXgB8QHVAXcB8QHUAXUB8AHTAXMB7wHSAXEB7gHRAW8B7QHQ
        AWwB7AHOAWoB6wHNAWgB6gHMAWUB6QHKAWMB6AHJAWAB5wHIAV4B5gHGAVsB5QHFAVkB5AHDAVYB4wHC
        AVTtAAHzAdcBegHyAdYBeAHxAdUBdwHxAdQBdQHwAdMBcwHvAdIBcQHuAdEBbwHtAdABbAHsAc4BagHr
        Ac0BaAHqAcwBZQHpAcoBYwHoAckBYAHnAcgBXgHmAcYBWwHlAcUBWQHkAcMBVu0AAfQB2AF8AfMB1wF6
        AfIB1gF4AfEB1QF3AfEB1AF1AfAB0wFzAe8B0gFxAe4B0QFvAe0B0AFsAewBzgFqAesBzQFoAeoBzAFl
        AekBygFjAegByQFgAecByAFeAeYBxgFbAeUBxQFZ7QAB9AHZAX0B9AHYAXwB8wHXAXoB8gHWAXgB8QHV
        AXcB8QHUAXUB8AHTAXMB7wHSAXEB7gHRAW8B7QHQAWwB7AHOAWoB6wHNAWgB6gHMAWUB6QHKAWMB6AHJ
        AWAB5wHIAV4B5gHGAVvtAAH1AdoBfgH0AdkBfQGTAXABBQGUAXEBBgHyAdYBeAHxAdUBdwGTAXABBQHw
        AdMBcwHvAdIBcQGTAXABBQGTAXABBQHsAc4BagHrAc0BaAGTAXABBQGTAXABBQHoAckBYAHnAcgBXvMA
        AZMBcAEFAZMBcwEKBgABkwFwAQUGAAGTAXABBQGTAXABBQYAAZMBcAEFAZMBcAEF/wD/AAkAAUIBTQE+
        BwABPgMAASgDAAFgAwABGAMAAQEBAAEBBQABIAEBFgAD/wEAAeABAAEHCQAB4AEAAQcJAAHgAQABBwkA
        AeABAAEHCQAB4AEAAQcJAAHgAQABBwkAAeABAAEHCQAB4AEAAQcJAAHgAQABBwkAAeABAAEHCQAB4AEA
        AQcJAAHgAQABBwkAAeABAAEHCQAB4AEAAQcJAAHgAQABBwkAAeABAAEHCQAB4AEAAQcJAAHgAQABBwkA
        AfABAAEHCQAB8AEAAQcJAAHwAQABBwkAAfABAAEHCQAB/AHZAZ8JAAP/CQAL
</value>
  </data>
</root>